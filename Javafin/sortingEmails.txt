// function to sort and send emails with four parameters: The first one is the listOfEmails from which the emails are deleted, the second one is used to select the email to send ; the third one is used to create the address of destination, the fourth one is used to count the number of emails sent to the selected address of destination.
FUNCTION sendEmail(listOfEmail, email, destination, count)
BEGIN
    send(email, "{destination}@parkshark.com")      // call the functionality to send the email
    delete(email, listOfEmails)        // functionality to delete one email from the list of emails. 
    RETURN count + 1        // add one to the number of email sent to the selected address
END

// subprocedure to print the emails sent at the end of the process or at the end of the day
SUBPROCEDURE printTotalofEmailsSent(total, recruitement, spam, sales, reception)
BEGIN
    WRITE(We have sorted {total} emails :
    {recruitement} to recruitment, {spam} to spam, {sales} to sales, {reception} to reception)
END


ALGORITHM sortingEmails

// Declaration of all variables : 
// - listOfEmail is an array containing all emails at the beginning of the process
// - recruitement, spam, sales and reception are used to count the number of emails sent during the process
// - totalRecruitement, totalSpam, totalSales, totalReception are used to count the number of emails sent during the day
// totalOfList is the addition of all emails sent during the process
// totalOfDay is the addition of all emails sent during the day
// ended allows to stop the program at the end of the day
VARIABLES 
    listOfEmails : array[] of strings
    recruitement, spam, sales, reception, totalofList, totalRecruitement, totalSpam, totalSales, totalReception, totalOfDay : integer
    ended: bool

BEGIN
    // attribution of values

    totalofList <- recruitment + spam + sales + reception
    totalRecruitement <- 0
    totalSpam <- 0
    totalSales <- 0
    totalReception <- 0
    totalOfDay <- 0
    ended <- false

WHILE day is not ended 
    listOfEmails <- input() // Getting emails from outside
    recruitement <- 0
    spam <- 0
    sales <- 0
    reception <- 0
    FOR index FROM 0 TO (length of listOfEmails)-1
        IF listOfEmails[index] contains the word "CV" THEN
            recruitement <- sendEmail(listOfEmails, listOfEmails[index], "recruitment", recruitment)
        ELSEIF listOfEmails[index] contains the word "promo" OR email contains the word "advertising" THEN
            spam <- sendEmail(listOfEmails, listOfEmails[index], "spam", spam)
        ELSEIF listOfEmails[0] contains the word "proposal" THEN
            sales <- sendEmail(listOfEmails, listOfEmails[index], "sales", sales)
        ELSE
            reception <- sendEmail(listOfEmails listOfEmails[index], "reception", reception)
        ENDIF
    ENDFOR
 
    // write message
    print printTotalofEmailsSent(totalOfList, recruitement, spam, sales, reception)


    // calculate total of emails of the day
    totalRecruitement = totalRecruitement + recruitement
    totalSpam = totalSpam + spam
    totalSales = totalSales + sales
    totalReception = totalReception + reception
    totalOfDay = totalOfDay + totalofList

    ended = input(is the end of the day ?)
ENDWHILE
print TotalofEmailsSent(totalOfDay, totalRecruitement, totalSpam, totalSales, totalReception)

END


























= SUBPROCEDURE - BEGIN - END
Procedure afficherResultat(param1 : type, ...):
DEBUT
    Ecrire(resultat) = READ
FIN
Appel: afficherResultat()

= FUNCTION - BEGIN - RETURN - END
Fonction afficherResultat(param1 : type, ...): type_retour
DEBUT
    Ecrire(resultat)
    Renvoie(valeur)
FIN
Appel: afficherResultat()

Ecrire(racotes[indice])

>= / <=

Selon que : 
CASE OF listOfEmails contains the word
    cv : Envoyer(email1)
    proposal : Envoyer(email2)
    {OTHERS: Envoyer(emailaccueil)}
ENDCASE